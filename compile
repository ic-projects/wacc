#!/usr/bin/ruby
# Ruby front-end for your compiler.
# You are free to change the language used for this script,
# but do *not* change its name.

require "optparse"

ARGV << "-h" if ARGV.empty?

$options = {}
$opts = []
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [OPTIONS] TARGET\n  OPTIONS:"

  $options[:parse_only] = false
  opts.on("-p", "--parse_only",
    "Parse only. Check the input file for syntax errors and generate an AST.") do
    $opts << "-parse"
    $options[:parse_only] = true
  end

  $options[:print_ast] = false
  opts.on("-t", "--print_ast",
    "View AST. Display AST generated by the parser." ) do
    $opts << "-ast"
    $options[:print_ast] = true
  end

  $options[:print_symbol_table] = false
  opts.on("-s", "--print_symbol_table",
    "View symbol table. Displays the symbol table generated by the semantic analysis.") do
    $opts << "-table"
    $options[:print_symbol_table] = true
  end

  $options[:directory] = false
  opts.on("-d", "--directory",
    "Give directory of wacc files." ) do
    $options[:directory] = true
  end

  $options[:semantic_check] = false
  opts.on("-s", "--semantic_check",
    "Semantic check. Parse the file for syntax and semantic errors and generate an AST." ) do
    $opts << "-semantic"
    $options[:semantic_check] = true
  end

  $options[:print_asm] = false
  opts.on("-a", "--print_asm",
    "View Assembly. Display ARM assembly code generated by the code generator." ) do
    $opts << "-asm"
    $options[:print_asm] = true
  end

  $options[:execute] = false
  opts.on("-x", "--execute",
    "Execute. Emulate the generated ARM code and display its output." ) do
    $options[:execute] = true
  end

  opts.on_tail("-h", "--help",
    "Show this message") do
    puts opts
    puts "  TARGET: Path to wacc program file to compile (or target directory if -dir option set)"
    exit
  end

end.parse!

# set up empty array of file_paths to process
files = []
if $options[:directory] then
  # add the results of a search to the array
  files += Dir.glob(File.join(ARGV[0], "**", "*.wacc"))
else
  # just add the target file to the array
  files << ARGV[0]
end

# check that there is at least one file to process
if files == [] then
  puts "Error: no file(s) targeted"
  exit 1
end

exitstatus = 0

# now process each target file
files.each do |file_path|
  output = %x(./gowacc #{$opts.join(" ")} #{file_path})
  exitstatus = $?.exitstatus
  puts output
  if $options[:execute] && exitstatus == 0 then
    emulatedexitstatus = 0
    puts "-- Assembling and Linking..."
    %x(arm-linux-gnueabi-gcc -o bin -mcpu=arm1176jzf-s -mtune=arm1176jzf-s ./#{(File.basename file_path)[0..-6]}.s)
    puts "-- Executing..."
    emulated = %x(qemu-arm -L /usr/arm-linux-gnueabi/ bin)
    File.delete("bin")
    emulatedexitstatus = $?.exitstatus
    puts "==========================================================="
    if emulated != "" then
      puts emulated
    end
    puts "==========================================================="
    puts "The exit code is #{emulatedexitstatus}."
  end
  puts "-- Finished"
end

exit exitstatus
