#!/usr/bin/ruby
# Ruby front-end for your compiler.
# You are free to change the language used for this script,
# but do *not* change its name.

require "optparse"

ARGV << "-h" if ARGV.empty?

$options = {}
$opts = []
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [OPTIONS] TARGET\n  OPTIONS:"

  $options[:parse_only] = false
  opts.on("-p", "--parse_only",
    "Parse only. Check the input file for syntax errors and generate an AST.") do
    $opts << "-p" 
    $options[:parse_only] = true
  end

  $options[:semantic_check] = false
  opts.on("-s", "--semantic_check",
    "Semantic check. Parse the file for syntax and semantic errors and generate an AST." ) do
    $opts << "-s" 
    $options[:semantic_check] = true
  end

  $options[:print_ast] = false
  opts.on("-t", "--print_ast",
    "View AST. Display AST generated by the parser." ) do
    $opts << "-t" 
    $options[:print_ast] = true
  end

  $options[:directory] = false
  opts.on("-d", "--directory",
    "Give directory of wacc files." ) do
    $options[:directory] = true
  end

  opts.on_tail("-h", "--help",
    "Show this message") do
    puts opts
    puts "  TARGET: Path to wacc program file to compile (or target directory if -dir option set)"
    exit
  end

end.parse!

# set up empty array of file_paths to process
files = []
puts ARGV[0]
if $options[:directory] then
  # add the results of a search to the array
  files += Dir.glob(File.join(ARGV[0], "**", "*.wacc"))
else
  # just add the target file to the array
  files << ARGV[0]
end

# check that there is at least one file to process
if files == [] then
  puts "Error: no file(s) targeted"
  exit 1
end

# now process each target file
files.each do |file_path|
  puts "Compiling #{file_path}"
  puts "-- Test: #{File.basename file_path}"
  puts ""
  puts "-- Uploaded file: "
  puts "---------------------------------------------------------------"
  puts IO.read(file_path)
  puts "---------------------------------------------------------------"
  puts ""
  puts "-- Compiler Output:"
  output = %x(src/wacc #{file_path})
  puts output
  puts ""
end
