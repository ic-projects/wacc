/*
Command gowacc compiles wacc source files to ARM assembly.

Compilation

To compile the gowacc tool, you should run the 'make' command from the project
root directory. This builds a 'gowacc' executable within the src directory,
and handles all required dependancies for you automatically.

Alternatively, if you have set up your GOPATH and GOBIN correctly, you can use
'go build' or 'go install' as usual. Go should handle dependancies for you.

Command-line usage

The gowacc tool must be called with wacc input (see below). The wacc input
should be provided as a file. The generated assembly code is written to stdout
by default.

By default, the compiler will only parse the input file and perform semantic
checking.

    gowacc [options] [WACC_SOURCE_FILE]

The following options are currently supported:

    -parse

Only parse the input. An AST will be generated, and any syntax errors will be
thrown. No semantic checks will be executed (default: false).

    -ast

Prints the AST created during parsing. The AST has the exact same format as
produced by the wacc reference compiler
(https://teaching.doc.ic.ac.uk/wacc_compiler/), with one exception: pairs are
printed as "pair" (if the constituent types are unknown) or "pair(t1, t2)" for a
pair of types t1 and t2. Pretty printing the AST is currently computationally
demanding, and should only be done when necessary (default: false).

    -table

Prints out the symbol table generated by semantic checking (default: false).

    -debug

Prints out debugging information during compilation. Currently, this prints any
changes to the stack during semantic checking (default: false).

WACC Syntax

WACC syntax is defined by the WACC specification, which can be found in the doc
directory. You will need to run the command 'make' within the doc directory, to
generate the specification document, spec.pdf.

The accepted syntax for the grammar is formally defined in the
grammar/wacc.peg file, using the PEG syntax.

Project Architecture

The gowacc source is currently made up of three important parts:

1. The main.go source. This file performs parsing and semantic checks.

2. The src/grammar directory. This contains a full grammar for the wacc
language, written using PEG syntax. Pigeon (https://github.com/mna/pigeon)
is used to automatically generate the parser code, which is saved in the main
package, as wacc.go. The generated parser is also responsible for performing
lexical analysis - unlike in most other solutions, where this would be a
separate stage. The AST is generated directly from excerpts of Go source code
within the grammar.

3. The AST package. This contains the code that we use to build our abstract
syntax tree, to represent a wacc program. We have designed it ourselves to
make it as easy-to-use as possible. This also contains an AST walker, which uses
a visitor pattern, and the semantic checking code, which uses that walker. See
packages below for a link to the full AST documentation.

Testing

To run the test suite, run the command 'make tests' in the project root
directory, which will provide a link to our ruby test suite. The test suite base
is taken from the ARM project test suite, but you may notice that we have made
significant modifications.
*/
package main
