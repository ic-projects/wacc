// RHSNode
ASSIGNRHS ← ARRAYLITER / NEWPAIR / PAIRELEM / CALL / EXPR

// ExpressionNode - defined in wacc_expression.peg

// ArrayLiteralNode
ARRAYLITER ← '[' _ exprs:(EXPR (_ ',' _ EXPR)*)? _ ']' {

	var expressions []ast.ExpressionNode
	if (exprs == nil) {
		expressions = nil
	} else {
		firstExpression := getItem(exprs, 0).(ast.ExpressionNode)
		expressions = []ast.ExpressionNode{firstExpression}
		for _, e := range toSlice(getItem(exprs, 1)) {
			expressions = append(
				expressions,
				getItem(e, 3).(ast.ExpressionNode),
			)
		}
	}

	return ret(ast.NewArrayLiteralNode(
		c.getPosition(),
		expressions,
	))

}

// NewPairNode
NEWPAIR ← "newpair" _ '(' _ t1:EXPR _ ',' _ t2:EXPR _ ')' {

	return ret(ast.NewNewPairNode(
		c.getPosition(),
		t1.(ast.ExpressionNode),
		t2.(ast.ExpressionNode),
	))

}

// PairFirstElementNode - defined in wacc_lhs.peg

// PairSecondElementNode - defined in wacc_lhs.peg

// FunctionCallNode
CALL ← "call" __ i:IDENT _ '(' _ args:ARGLIST? _ ')' {

	if(args == nil) {
		return ret(ast.NewFunctionCallNode(
			c.getPosition(),
			i.(*ast.IdentifierNode),
			[]ast.ExpressionNode{},
		))
	}

	return ret(ast.NewFunctionCallNode(
		c.getPosition(),
		i.(*ast.IdentifierNode),
		args.([]ast.ExpressionNode),
	))

}

ARGLIST ← expr:EXPR exprs:(_ ',' _ EXPR)* {

	argList := []ast.ExpressionNode{expr}
	for _, e := range toSlice(exprs) {
		argList = append(argList, getItem(e, 3).(ast.ExpressionNode))
	}

	return ret(argList)

}
