{
    package main

    import (
        "ast"
    )

    func (p position) getPosition() ast.Position {
        return ast.NewPosition(p.line, p.col, p.offset)
    }
}

PROGRAM <- _ "begin" fs:(__ FUNC)* _ stat:STAT _ "end" {
    main := ast.NewFunctionNode(
        c.pos.getPosition(),
        ast.NewBaseTypeNode(ast.INT),
        "main",
        []ast.ParameterNode{},
        stat.([]ast.StatementNode),
    )
    functions := []ast.FunctionNode{main}
    // for _, f := range fs.([]interface{}) {
    //     functions = append(functions, f.([]interface{})[1].(ast.FunctionNode))
    // }
    return ast.NewProgram(functions), nil
}

FUNC <- TYPE __ IDENT _ '(' _ PARAMLIST? _ ')' _ "is" __ STAT _ "end"
PARAMLIST <- PARAM (_ ',' _ PARAM)*
PARAM <- TYPE __ IDENT

STAT <- stat:(SKIP / NEWASSIGN / ASSIGN / READ / FREE / RETURN / EXIT / PRINT / PRINTLN / IF / WHILE / SCOPE) stats:(_ ';' _ (SKIP / NEWASSIGN / ASSIGN / READ / FREE / RETURN / EXIT / PRINT / PRINTLN / IF / WHILE / SCOPE))* {
    statements := []ast.StatementNode{stat}
    for _, s := range stats.([]interface{}) {
        statements = append(statements, s.([]interface{})[3].(ast.StatementNode))
    }
    return statements, nil
}

SKIP <- "skip" {
    return ast.NewSkipNode(c.pos.getPosition()), nil
}
NEWASSIGN <- TYPE __ IDENT _ '=' _ ASSIGNRHS
ASSIGN <- ASSIGNLHS _ "=" _ ASSIGNRHS
READ <- "read" __ ASSIGNLHS
FREE <- "free" __ EXPR
RETURN <- "return" __ EXPR
EXIT <- "exit" __ EXPR
PRINT <- "print" __ EXPR
PRINTLN <- "println" __ EXPR
IF <- "if" __ EXPR _ "then" __ STAT _ "else" __ STAT _ "fi"
WHILE <- "while" __ EXPR _ "do" __ STAT _ "done"
SCOPE <- "begin" __ STAT _ "end"

ASSIGNLHS <- PAIRELEM / ARRAYELEM / IDENT
ASSIGNRHS <- ARRAYLITER / NEWPAIR / PAIRELEM / CALL / EXPR
NEWPAIR <- "newpair" _ '(' _ EXPR _ ',' _ EXPR _ ')'
CALL <- "call" __ IDENT _ '(' _ ARGLIST? _ ')'
ARGLIST <- EXPR (_ ',' _ EXPR)*
PAIRELEM <- FST / SND
FST <- "fst" __ EXPR
SND <- "snd" __ EXPR

TYPE <- (BASETYPE / PAIRTYPE) (_ ARRAYTYPE)*
BASETYPE <- INT / BOOL / CHAR / STRING
INT <- "int"
BOOL <- "bool"
CHAR <- "char"
STRING <- "string"
ARRAYTYPE <- '[' _ ']'
PAIRTYPE <- "pair" _ '(' _ PAIRELEMTYPE _ ',' _ PAIRELEMTYPE _ ')'

PAIRELEMTYPE <- ((BASETYPE / ARRAYTYPE) (_ ARRAYTYPE)*) / BASETYPE / PAIR
PAIR <- "pair"

EXPR <- ((BREXPR _ ')') / INTLITER / BOOLLITER / CHARLITER / STRLITER / PAIRLITER / (UNARYOPER _ EXPR) / ARRAYELEM / IDENT) (_ BINARYOPER _ EXPR)*
BREXPR <- '(' _ EXPR
UNARYOPER <- NOT / NEG / LEN / ORD / CHR
NOT <- '!'
NEG <- '-'
LEN <- "len"
ORD <- "ord"
CHR <- "chr"
BINARYOPER <- MULT / DIV / MOD / PLUS / SUB / GEQ / GT / LEQ / LT / EQ / NEQ / AND / OR
MULT <- '*'
DIV <- '/'
MOD <- '%'
PLUS <- '+'
SUB <- '-'
GT <- '>'
GEQ <- ">="
LT <- '<'
LEQ <- "<="
EQ <- "=="
NEQ <- "!="
AND <- "&&"
OR <- "||"


IDENT <- ('_' / [a-z] / [A-Z]) ('_' / [a-z] / [A-Z] / [0-9])*

ARRAYELEM <- IDENT (_ '[' _ EXPR _ ']')+
INTLITER <- INTSIGN? _ DIGIT+
DIGIT <- [0-9]
INTSIGN <- '+' / '-'
BOOLLITER <- TRUE / FALSE
TRUE <- "true"
FALSE <- "false"
CHARLITER <- "'" CHARACTER "'"
STRLITER <- '"' CHARACTER* '"'
CHARACTER <- [^""''\\] / '\\' ESCAPEDCHAR
ESCAPEDCHAR <- [0btnfr""''\\]
ARRAYLITER <- '[' _ (EXPR (_ ',' _ EXPR)*)? _ ']'
PAIRLITER <- "null"

/**** Comments and Spacing ****/

Comment <- '#' ([^\n])* '\n'

_ "Optional Space" <- ([ \n\t\r] / Comment)*
__ "Obligatory Space" <- ([ \n\t\r] / Comment)+
