// ProgramNode
START ←_ p:PROGRAM {
	return ret(p)
}

PROGRAM ← ss:(_ STRUCT)* _ "begin" fs:(__ FUNC)* _ stat:STATS _ "end" _ !. {

	main := ast.NewFunctionNode(
		c.getPosition(),
		ast.NewBaseTypeNode(ast.VOID),
		ast.NewIdentifierNode(c.getPosition(), ""),
		[]*ast.ParameterNode{},
		stat.([]ast.StatementNode),
	)

	functions := []*ast.FunctionNode{}
	for _, f := range toSlice(fs) {
		functions = append(functions, getItem(f, 1).(*ast.FunctionNode))
	}
	functions = append(functions, main)

	structs := []*ast.StructNode{}
	for _, s := range toSlice(ss) {
		structs = append(structs, getItem(s, 1).(*ast.StructNode))
	}

	return ret(ast.NewProgram(structs, functions))

} / ss:(_ STRUCT)* _ "begin" fs:(__ FUNC)* _ "end" _ !. {

	functions := []*ast.FunctionNode{}
	for _, f := range toSlice(fs) {
		functions = append(functions, getItem(f, 1).(*ast.FunctionNode))
	}

	structs := []*ast.StructNode{}
	for _, s := range toSlice(ss) {
		structs = append(structs, getItem(s, 1).(*ast.StructNode))
	}

	err := errors.New("Program body empty")

	return ast.NewProgram(structs, functions), err
}

STRUCT ← "struct" __ i:IDENT __ "is" __ ts:STRUCTINTERNALLIST? __ "end" {

	if ts != nil {

		return ret(ast.NewStructNode(
			c.getPosition(),
			i.(*ast.IdentifierNode),
			ts.([]*ast.StructInternalNode),
		))

	} else {

		return ret(ast.NewStructNode(
			c.getPosition(),
			i.(*ast.IdentifierNode),
			[]*ast.StructInternalNode{},
		))

	}
}

STRUCTINTERNALLIST ← s:STRUCTINTERNAL ss:(_ STRUCTINTERNAL)* {

	structList := []*ast.StructInternalNode{s.(*ast.StructInternalNode)}
	for _, p := range toSlice(ss) {
		structList = append(structList, getItem(p, 1).(*ast.StructInternalNode))
	}

	return ret(structList)

}

STRUCTINTERNAL ← t:TYPE _ i:IDENT _ ';' {
	return ret(ast.NewStructInternalNode(
		c.getPosition(),
		i.(*ast.IdentifierNode),
		t.(ast.TypeNode)))
}

// FunctionNode
FUNC ← t:TYPE _ structIdent:(IDENT'.')?i:IDENT _ '(' _ params:PARAMLIST? _ ')' _ "is" __ s:STATS
       _ "end" {

	stats := s.([]ast.StatementNode)
	finalStat := stats[len(stats)-1]

	var err error
	if (!ast.FinalStatIsValid(finalStat)) {
		name := strings.TrimPrefix(i.(*ast.IdentifierNode).String(), "- ")
		errmsg := fmt.Sprintf(
			"Function \"%s\" is not ended with a return or an exit statement",
			name,
		)
		err = errors.New(errmsg)
	}
  var paramaters []*ast.ParameterNode
  if params != nil {
    paramaters = params.([]*ast.ParameterNode)
  } else {
    paramaters = make([]*ast.ParameterNode, 0)
  }

  if structIdent != nil {
    paramaters = append(
      paramaters,
      ast.NewParameterNode(
        c.getPosition(),
        ast.NewStructTypeNode((getItem(structIdent, 0)).(*ast.IdentifierNode)),
        ast.NewIdentifierNode(c.getPosition(), "this"),
      ),
    )
  }

	return ast.NewFunctionNode(
		c.getPosition(),
		t.(ast.TypeNode),
		i.(*ast.IdentifierNode),
		paramaters,
		stats,
	), err

} / t:TYPE _ ident:RESERVED _ '(' _ params:PARAMLIST? _ ')' _ "is" __ s:STATS
    _ "end" {

	name := string(getItem(ident, 0).([]byte))
	errmsg := fmt.Sprintf("Invalid identifier, \"%s\" (reserved)", name)
	err := errors.New(errmsg)

	return ast.NewFunctionNode(
		c.getPosition(),
		t.(ast.TypeNode),
		ast.NewIdentifierNode(c.getPosition(), name),
		[]*ast.ParameterNode{},
		[]ast.StatementNode{},
	), err

}

PARAMLIST ← param:PARAM params:(_ ',' _ PARAM)* {

	paramList := []*ast.ParameterNode{param.(*ast.ParameterNode)}
	for _, p := range toSlice(params) {
		paramList = append(paramList, getItem(p, 3).(*ast.ParameterNode))
	}

	return ret(paramList)

}

// Parameter Node
PARAM ← t:TYPE _ i:IDENT {

	return ret(ast.NewParameterNode(
		c.getPosition(),
		t.(ast.TypeNode),
		i.(*ast.IdentifierNode),
	))

}

// Spacing and Comments
_ "Optional Space" ← ([ \n\t\r] / COMMENT)*
__ "Obligatory Space" ← ([ \n\t\r] / COMMENT)+
COMMENT ← '#' ([^\n])* '\n'
