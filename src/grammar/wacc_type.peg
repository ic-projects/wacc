// TypeNode
TYPE ← t:POINTERTYPE {
	return ret(t)
} / t:NONPOINTERTYPE _ {
	return ret(t)
}

NONPOINTERTYPE ← t:(BASETYPE / PAIRTYPE / STRUCTTYPE) array:(_ ARRAYTYPE)* __ {

	if (len(toSlice(array)) > 0) {
		return ret(ast.NewArrayTypeDimNode(
			t.(ast.TypeNode),
			len(toSlice(array)),
		))
	}

	return ret(t)

} / _ {
	return ret(ast.NewDynamicTypeNode())
}

STRUCTTYPE ← '$' i:IDENT {
	return ret(ast.NewStructTypeNode(i.(*ast.IdentifierNode)))
} / "struct" __ i:IDENT {
	return ret(ast.NewStructTypeNode(i.(*ast.IdentifierNode)))
}

POINTERTYPE ← t:NONPOINTERTYPE _ '*' {
	return ret(ast.NewPointerTypeNode(t.(ast.TypeNode)))
}

// BaseTypeNode
BASETYPE ←
	INT /
	BOOL /
	CHAR /
	STRING

INT ← "int" {
	return ret(ast.NewBaseTypeNode(ast.INT))
}

BOOL ← "bool" {
	return ret(ast.NewBaseTypeNode(ast.BOOL))
}

CHAR ← "char" {
	return ret(ast.NewBaseTypeNode(ast.CHAR))
}

STRING ← "string" {
	return ret(ast.NewStringArrayTypeNode())
}

PAIR ← "pair" {
	return ret(ast.NewBaseTypeNode(ast.PAIR))
}

// ArrayTypeNode
ARRAYTYPE ← '[' _ ']'

// PairTypeNode
PAIRTYPE ← "pair" _ '(' _ t1:PAIRELEMTYPE _ ',' _ t2:PAIRELEMTYPE _ ')' {
	return ret(ast.NewPairTypeNode(
		t1.(ast.TypeNode),
		t2.(ast.TypeNode),
	))
}

PAIRELEMTYPE ← (t:BASETYPE array:(_ ARRAYTYPE)*) {

	if (len(array.([]interface{})) > 0) {
		return ret(ast.NewArrayTypeDimNode(
			t.(ast.TypeNode),
			len(toSlice(array)),
		))
	}

	return ret(t)

} / (t:PAIRTYPE array:(_ ARRAYTYPE)+) {

	return ret(ast.NewArrayTypeDimNode(
		t.(ast.TypeNode),
		len(toSlice(array)),
	))

} / PAIR
