// RHSNode
ASSIGNRHS ←
	ARRAYLITER /
	NEWPAIR /
	NEWSTRUCT /
	POINTERNEW /
	POINTERDEREFERENCE /
	PAIRELEM /
	CALL /
	EXPR

// ExpressionNode - defined in wacc_expression.peg

// ArrayLiteralNode
ARRAYLITER ← '[' _ exprs:(EXPR (_ ',' _ EXPR)*)? _ ']' {

	var expressions []ExpressionNode
	if (exprs == nil) {
		expressions = nil
	} else {
		firstExpression := getItem(exprs, 0).(ExpressionNode)
		expressions = []ExpressionNode{firstExpression}
		for _, e := range toSlice(getItem(exprs, 1)) {
			expressions = append(
				expressions,
				getItem(e, 3).(ExpressionNode),
			)
		}
	}

	return ret(NewArrayLiteralNode(
		c.getPosition(),
		expressions,
	))

}

// NewPairNode
NEWPAIR ← "newpair" _ '(' _ t1:EXPR _ ',' _ t2:EXPR _ ')' {

	return ret(NewNewPairNode(
		c.getPosition(),
		t1.(ExpressionNode),
		t2.(ExpressionNode),
	))

}

// NewStructNode
NEWSTRUCT ← "new" __ i:IDENT _ '(' _  args:ARGLIST? _ ')' {

	if args == nil {
		return ret(NewStructNewNode(
			c.getPosition(),
			i.(*IdentifierNode),
			[]ExpressionNode{},
		))
	} else {
		return ret(NewStructNewNode(
			c.getPosition(),
			i.(*IdentifierNode),
			args.([]ExpressionNode),
		))
	}

}

// PointerNewNode
POINTERNEW ← '&' ident:IDENT {

	return ret(NewPointerNewNode(
		c.getPosition(),
		ident.(*IdentifierNode),
	))

}

// PointerDereferenceNode
POINTERDEREFERENCE ← '*' ident:IDENT {

	return ret(NewPointerDereferenceNode(
		c.getPosition(),
		ident.(*IdentifierNode),
	))

}

// PairFirstElementNode - defined in wacc_lhs.peg

// PairSecondElementNode - defined in wacc_lhs.peg

// FunctionCallNode
CALL ← "call" __ i:IDENT _ '(' _ args:ARGLIST? _ ')' {

	if(args == nil) {
		return ret(NewFunctionCallNode(
			c.getPosition(),
			i.(*IdentifierNode),
			[]ExpressionNode{},
		))
	}

	return ret(NewFunctionCallNode(
		c.getPosition(),
		i.(*IdentifierNode),
		args.([]ExpressionNode),
	))

}

ARGLIST ← expr:EXPR exprs:(_ ',' _ EXPR)* {

	argList := []ExpressionNode{expr.(ExpressionNode)}
	for _, e := range toSlice(exprs) {
		argList = append(argList, getItem(e, 3).(ExpressionNode))
	}

	return ret(argList)

}
