// StatementNode
STATS ← stat:STAT stats:(_ ';' _ STAT)* {

	statements := []ast.StatementNode{stat.(ast.StatementNode)}
	for _, s := range toSlice(stats) {
		statements = append(statements, getItem(s, 3).(ast.StatementNode))
	}

	return ret(statements)

}

STAT ←
	SKIP /
	ASSIGN /
	NEWASSIGN /
	READ /
	FREE /
	RETURN /
	EXIT /
	PRINT /
	PRINTLN /
	IF /
	WHILE /
	SCOPE /
  SWITCH /
  FOR


// SkipNode
SKIP ← "skip" {

	return ret(ast.NewSkipNode(
		c.getPosition(),
	))

}

// AssignNode
ASSIGN ← lhs:ASSIGNLHS _ '=' _ rhs:ASSIGNRHS {

	if arr, ok := lhs.(*ast.ArrayElementNode); ok {
		arr.SetPointer(true)
		return ret(ast.NewAssignNode(
			c.getPosition(),
			arr,
			rhs.(ast.LHSNode),
		))
	}
	if s, ok := lhs.(*ast.StructElementNode); ok {
		s.SetPointer(true)
		return ret(ast.NewAssignNode(
			c.getPosition(),
			s,
			rhs.(ast.LHSNode),
		))
	}
	if fst, ok := lhs.(*ast.PairFirstElementNode); ok {
		fst.SetPointer(true)
		return ret(ast.NewAssignNode(
			c.getPosition(),
			fst,
			rhs.(ast.LHSNode),
		))
	}
	if snd, ok := lhs.(*ast.PairSecondElementNode); ok {
		snd.SetPointer(true)
		return ret(ast.NewAssignNode(
			c.getPosition(),
			snd,
			rhs.(ast.LHSNode),
		))
	}

	return ret(ast.NewAssignNode(
		c.getPosition(),
		lhs.(ast.LHSNode),
		rhs.(ast.LHSNode),
	))

}

// DeclareNode
NEWASSIGN ← t:TYPE ident:IDENT _ '=' _ rhs:ASSIGNRHS {

	if _, ok := t.(*ast.DynamicTypeNode); ok {
		errmsg := fmt.Sprintf("Type required in non-dynamic declaration, use ':=' or specify a type")
		err := errors.New(errmsg)

		return ast.NewDeclareNode(
			c.getPosition(),
			t.(ast.TypeNode),
			ident.(*ast.IdentifierNode),
			rhs.(ast.RHSNode),
		), err
	}

	return ret(ast.NewDeclareNode(
		c.getPosition(),
		t.(ast.TypeNode),
		ident.(*ast.IdentifierNode),
		rhs.(ast.RHSNode),
	))

} / t:TYPE ident:IDENT _ ":=" _ rhs:ASSIGNRHS {

	return ret(ast.NewDeclareNode(
		c.getPosition(),
		t.(ast.TypeNode),
		ident.(*ast.IdentifierNode),
		rhs.(ast.RHSNode),
	))

} / t:TYPE ident:RESERVED _ ":=" _ rhs:ASSIGNRHS {

	name := string(getItem(ident, 0).([]byte))
	errmsg := fmt.Sprintf("Invalid identifier, \"%s\" (reserved)", name)
	err := errors.New(errmsg)

	return ast.NewDeclareNode(
		c.getPosition(),
		t.(ast.TypeNode),
		ident.(*ast.IdentifierNode),
		rhs.(ast.RHSNode),
	), err

} / t:TYPE ident:RESERVED _ '=' _ rhs:ASSIGNRHS {

	name := string(getItem(ident, 0).([]byte))
	errmsg := fmt.Sprintf("Invalid identifier, \"%s\" (reserved)", name)
	err := errors.New(errmsg)

	return ast.NewDeclareNode(
		c.getPosition(),
		t.(ast.TypeNode),
		ast.NewIdentifierNode(c.getPosition(), name),
		rhs.(ast.RHSNode),
	), err

}

// ReadNode
READ ← "read" __ lhs:ASSIGNLHS {

	if arr, ok := lhs.(*ast.ArrayElementNode); ok {
		arr.SetPointer(true)
		return ret(ast.NewReadNode(
			c.getPosition(),
			arr,
		))
	}
	if s, ok := lhs.(*ast.StructElementNode); ok {
		s.SetPointer(true)
		return ret(ast.NewReadNode(
			c.getPosition(),
			s,
		))
	}
	if fst, ok := lhs.(*ast.PairFirstElementNode); ok {
		fst.SetPointer(true)
		return ret(ast.NewReadNode(
			c.getPosition(),
			fst,
		))
	}
	if snd, ok := lhs.(*ast.PairSecondElementNode); ok {
		snd.SetPointer(true)
		return ret(ast.NewReadNode(
			c.getPosition(),
			snd,
		))
	}

	return ret(ast.NewReadNode(
		c.getPosition(),
		lhs.(ast.LHSNode),
	))

}

// FreeNode
FREE ← "free" __ expr:EXPR {

	return ret(ast.NewFreeNode(
		c.getPosition(),
		expr.(ast.ExpressionNode),
	))

}

// ReturnNode
RETURN ← "return" __ expr:EXPR {

	return ret(ast.NewReturnNode(
		c.getPosition(),
		expr.(ast.ExpressionNode),
	))

}

// ExitNode
EXIT ← "exit" __ expr:EXPR {

	return ret(ast.NewExitNode(
		c.getPosition(),
		expr.(ast.ExpressionNode),
	))

}

// PrintNode
PRINT ← "print" __ expr:EXPR {

	return ret(ast.NewPrintNode(
		c.getPosition(),
		expr.(ast.ExpressionNode),
	))

}

// PrintlnNode
PRINTLN ← "println" __ expr:EXPR {

	return ret(ast.NewPrintlnNode(
		c.getPosition(),
		expr.(ast.ExpressionNode),
	))

}

// SwitchNode
SWITCH ← "case" __ expr:EXPR __ cases:(_ CASE)+ _ defaultCase:(DEFAULT)? _ "fi" {
  var caseNodes []ast.CaseNode
  for _, e := range toSlice(cases) {
    caseNodes = append(caseNodes, getItem(e, 1).(ast.CaseNode))
  }
  if (defaultCase != nil) {
    caseNodes = append(caseNodes, defaultCase.(ast.CaseNode))
  }
  return ret(ast.NewSwitchNode(
    c.getPosition(),
    expr.(ast.ExpressionNode),
    caseNodes,
    ))
}

CASE ← "when" __ expr:EXPR exprs:(_ ',' _ EXPR)* _ ':' _ stats:STATS _ "end" {
  expressionList := []ast.ExpressionNode{expr.(ast.ExpressionNode)}
  for _, p := range toSlice(exprs) {
    expressionList = append(expressionList, getItem(p, 3).(ast.ExpressionNode))
  }
  return ret(ast.NewCaseNode(
    c.getPosition(),
    expressionList,
    stats.([]ast.StatementNode),
  ))
}

DEFAULT ← "else" _ ':' _ stats:STATS _ "end" {
  return ret(ast.NewDefaultCaseNode(
    c.getPosition(),
    stats.([]ast.StatementNode),
  ))
}

// IfNode
IF ← "if" __ cond:EXPR _ "then" __ ifStats:STATS _ "else" __ elseStats:STATS _ "fi" {

	return ret(ast.NewIfNode(
		c.getPosition(),
		cond.(ast.ExpressionNode),
		ifStats.([]ast.StatementNode),
		elseStats.([]ast.StatementNode),
	))

}

// LoopNode
WHILE ← "while" __ cond:EXPR _ "do" __ stats:STATS _ "done" {

	return ret(ast.NewLoopNode(
		c.getPosition(),
		cond.(ast.ExpressionNode),
		stats.([]ast.StatementNode),
	))

}

// ForLoopNode
FOR ← "for" __ initial:(NEWASSIGN/ASSIGN) _ ";" _ cond:EXPR _ ";" _ update:(NEWASSIGN/ASSIGN) _ "do" __ stats:STATS _ "done" {

  return ret(ast.NewForLoopNode(
		c.getPosition(),
    initial.(ast.StatementNode),
		cond.(ast.ExpressionNode),
    update.(ast.StatementNode),
		stats.([]ast.StatementNode),
	))

}

// ScopeNode
SCOPE ← "begin" __ stats:STATS _ "end" {

	return ret(ast.NewScopeNode(
		c.getPosition(),
		stats.([]ast.StatementNode),
	))

}
